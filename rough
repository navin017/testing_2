import React from 'react'
// import { useSelector } from 'react-redux';
// import './products.css';
// import AutoFixHighRoundedIcon from '@mui/icons-material/AutoFixHighRounded';

// export const ProductComponent = () => {
//   const products = useSelector((state) => state.allProducts.products);
//   const { id, title, category,image} = products[0];
//   return (
//     <div>
//       <div className='components'>
//       <img className="img" src={image} alt='img'/>
//         <ul>
//           <div className='content'>
//             <li>
//               {title}
//               {id}
//               {category}
//             </li>
//             <li className='modify'><button className='view-btn'>view</button><AutoFixHighRoundedIcon/></li>
//           </div>
//         </ul>
//       </div>
//     </div>
//   )
// }
// export const productReducer = (state = initialState,{type,payload})=>{
//     switch(type){
//         case ActionType.SET_PRODUCTS:
//             return state;
//         default:
//             return state;
            
//     }
// }

<!-- {showDetails[product.id] ? 
    <form >     
    <table className='viewForm'>
      <tr>
      <td><label for='id'>ENTER PRODUCT ID</label></td>
     
      {product.title}
      </tr>
    </table>
    </form>
    :
    ''} -->
    <!-- {form ? onClick={editHandler}:''} -->
    ...................................................
    <!-- import React from "react";
import { Fragment, useRef, useState } from 'react';
import { ProductList } from './productList';
import { useDispatch } from "react-redux";
import { Link } from 'react-router-dom'
import { addProduct } from '../redux/action/productAction';

export const Top = () => {
    const dispatch = useDispatch();

    const nameInputRef = useRef();
    const [image, setImage] = useState([]);
    const [newInclude, setNewInclude] = useState([])
    const [inputValue, setInputValue] = useState('')
    const [enterValue, setEnterValue] = useState(true)
    const [inputId, setInputId] = useState('')
    const [enterId, setEnterId] = useState(true)
    const [inputQuantity, setInputQuantity] = useState('')
    const [enterQuantity, setEnterQuantity] = useState(true)
    const [inputPrice, setInputPrice] = useState('')
    const [enterPrice, setEnterPrice] = useState(true)
    const [updateData, setUpdateData] = useState([])
    const [size,setSize] = useState([])
    const[editForm,setEditForm] = useState(false)

    const uploadImage = (e) => {
        setImage([...e.target.files]);

    }

    // Validation...............
    const inputChangeHandler = (e) => {
        setInputValue(e.target.value)
        setUpdateData({
            ...updateData,
            [e.target.name]: e.target.value
        })

    }

    const inputIdChangeHandler = (e) => {
        setInputId(e.target.value)
        setUpdateData({
            ...updateData,
            [e.target.name]: e.target.value
        })
    }
    const inputSizeChangeHandler = (e) =>{
        setSize(e.target.value)

    }
    const inputQuantityChangeHandler = (e) => {
        setInputQuantity(e.target.value)
        setUpdateData({
            ...updateData,
            [e.target.name]: e.target.value
        })
        console.log(updateData.length)
    }
    const inputPriceChangeHandler = (e) => {
        setInputPrice(e.target.value)
        setUpdateData({
            ...updateData,
            [e.target.name]: e.target.value
        })
    }

    const inputFormHandler = (e) => {
        e.preventDefault();
        if (inputValue.trim() === '') {
            setEnterValue(false)
            return;
        }
        if (inputId.trim() === '') {
            setEnterId(false)
            return;
        }
        if (inputQuantity.trim() === '') {
            setEnterQuantity(false)
            return;
        }
        if (inputPrice.trim() === '') {
            setEnterPrice(false)
            return;
        }
        const reader = new FileReader();
  reader.onload = () => {
    const imageData = reader.result;

    const newProduct = {
      id: inputId,
      category: 'asd',
      title: inputValue,
      image: imageData, // Assign the image data to the image property
      size: size,
      quantity: inputQuantity,
      price: inputPrice
    };
console.log(newProduct)
    dispatch(addProduct(newProduct));
    setInputPrice('');
    setInputQuantity('');
    setInputValue('');
    setInputId('');
    setEnterValue(true);
    setEnterId(true);
    setEnterQuantity(true);
    setEnterPrice(true);
    setEditForm(false)
  };

  reader.readAsDataURL(image[0]); // Read the image file as data URL
};

    const editFormHandler = (e)=>{
        e.preventDefault()
        setEditForm(true)

    }
    // OverAll form...............
 
    const closeFormHandler = (e) => {
        e.preventDefault();
        setInputPrice('')
        setInputQuantity('')
        setInputValue('')
        setInputId('')
        setEditForm(true)
    }
    
    return (
        <>
        
           
                <form onSubmit={inputFormHandler}>
                    <Fragment>
                        <div>
                            <table className='cover'>
                                <h3>PRODUCT DETAILS</h3>
                                <tr>
                                    <td><label for='pname'>ENTER PRODUCT NAME</label>
                                        <input
                                            type='text'
                                            ref={nameInputRef}
                                            className='pname' name='pname'
                                            onChange={inputChangeHandler}
                                            value={inputValue}>
                                        </input>
                                    </td>
                                </tr>
                                {!enterValue && <p className='validity'>please enter something</p>}
                                <tr>
                                    <td><label for='id'>ENTER PRODUCT ID</label><br></br>
                                        <input
                                            type='number'
                                            className='id'
                                            name='id'
                                            onChange={inputIdChangeHandler}
                                            value={inputId}
                                        >
                                        </input>
                                    </td>
                                </tr>
                                {!enterId && <p className='validity'>please enter something</p>}
                                <tr>
                                    <td><label for='size'>SIZE</label><br></br>
                                        <select className='size' name='size' onChange={inputSizeChangeHandler} value={size}>
                                            <option value="s">Small</option>
                                            <option value="m">Medium</option>
                                            <option value="l">Large</option>
                                            <option value="xl">XL</option>

                                        </select></td>
                                </tr>
                                <tr>
                                    <td><label for='quantity'>QUANTITY</label><br></br>
                                        <input type='number'
                                            className='quantity'
                                            name='quantity'
                                            onChange={inputQuantityChangeHandler}
                                            value={inputQuantity}>
                                        </input>
                                    </td>
                                </tr>
                                {!enterQuantity && <p className='validity'>please enter something</p>}
                                <tr>
                                    <td><label for='price'>ENTER PRODUCT PRICE</label> <br></br>
                                        <select className='currency' name='currency'>
                                            <option value="rs">â‚¹</option>
                                            <option value="doll">$</option>
                                        </select>
                                        <input
                                            type='text'
                                            className='price'
                                            name='price'
                                            onChange={inputPriceChangeHandler}
                                            value={inputPrice}>
                                        </input></td>
                                </tr>
                                {!enterPrice && <p className='validity'>please enter something</p>}
                                <label for='price'>UPLOAD IMAGE</label>
                                <input
                                    type='file'
                                    className='img'
                                    multiple accept="image/*"
                                    onChange={uploadImage}>
                                </input>
                                {newInclude.map(imgSrc => <img src={imgSrc} />)}
                                <div className="submission">
                                    <button type='submit' onClick={closeFormHandler} className='submit-btn' >Update</button>
                                
                                </div>
                            </table>
                        </div>
                        
                    </Fragment>
                   
                </form>
                
            

            
        </>
    );

}

 -->
 <!-- import React, { useState } from 'react';
 import './app.css';
 import { Link, Route, Navigate, useLocation } from 'react-router-dom';
 import { Header } from './container/header';
 import { Login } from './login';
 
 const PrivateRoute = ({ path, element }) => {
   const [isLoggedIn, setIsLoggedIn] = useState(localStorage.getItem('isLoggedIn') === 'true');
   const location = useLocation();
 
   if (!isLoggedIn && location.pathname !== '/login') {
     return <Navigate to="/login" replace />;
   }
 
   return <Route path={path} element={element} />;
 };
 
 const App = () => {
   return (
     <div className="App">
       <Link to="/login">Login</Link>
       <Link to="/user">User</Link>
 
       <Route path="/login" element={<Login />} />
       <PrivateRoute path="/user" element={<Header />} />
     </div>
   );
 };
 
 export default App; -->
 ........................................................................................
 <!-- import React, { useState } from 'react';
import './app.css';
import { Routes, Navigate} from 'react-router-dom';
import { createBrowserRouter, RouterProvider } from 'react-router-dom';

import { Header } from './container/header';
import { Login } from './login';

const App = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(localStorage.getItem('isLoggedIn') === 'true');

  const handleLogin = () => {
    setIsLoggedIn(true);
    localStorage.setItem('isLoggedIn', 'true');
    const route = createBrowserRouter([
      { path: "/login", element: <Login handleLogin={handleLogin} /> },
      { path: "/user", element: isLoggedIn ? <Header /> : <Navigate to="/login" replace /> },
    ])
    return (
      <Routes>
        <RouterProvider router={route}>
          <div className="App">

          </div>
        </RouterProvider>
      </Routes>
    );
  }
}
export default App; -->
.........................................................................
<!-- {/* <label htmlFor='price'>UPLOAD IMAGE</label>
<input
  type='file'
  className='img'
  multiple
  accept='image/*'
  onChange={uploadImage}
/> -->
<!-- {newInclude.map((imgSrc) => <img src={imgSrc} key={imgSrc} />)} -->
............................................................................
<!-- const uploadImage = (e) => {
    const selectedImage = Array.from(e.target.files);
    const allowedExtensions = ['imge/jpg','imge/png'];
    const check = [];
     for(let i = 0; i<selectedImage.length;i++){
        const file = selectedImage[i];
        if(allowedExtensions.includes(file.type))
        {
            check.push(URL.createObjectURL(file))
        }
     }
    setImage(check);
} -->
................................................................................................................................
                                              <!-- //login.test.js
                                              
import { render, screen, fireEvent, waitFor, act, getByTestId } from '@testing-library/react';
import { Provider } from 'react-redux';
import store from '../redux/store'
import Login from '../login'
import { BrowserRouter } from 'react-router-dom';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom'
const storeRender = () => {
  render(
    <Provider store={store}>
      <BrowserRouter>
        <Login />
      </BrowserRouter>
    </Provider>
  )
}


describe("Request Services Component Tests", function () {

  test('login Heading', () => {
    storeRender();
    const linkElement = screen.getByTestId("login-header");
    expect(linkElement).toBeTruthy();
  })
  test('mail lable text', () => {
    storeRender();
    const linkElement = screen.getByTestId("login-mail");
    expect(linkElement).toBeTruthy();
  })
  test('mailInputField', () => {
    storeRender();
    const linkElement = screen.getByTitle("login-mailID");
    expect(linkElement).toBeTruthy();
  })
  test('password lable text', () => {
    storeRender();
    const linkElement = screen.getByTitle("login-password");
    expect(linkElement).toBeTruthy();
  })
  test('passwordINputField', () => {
    storeRender();
    const linkElement = screen.getByTitle("login-passcode");
    expect(linkElement).toBeTruthy();
  })
  test('login_btn', () => {
    storeRender();
    const linkElement = screen.getByTestId("login-btn1");
    expect(linkElement).toBeTruthy();
  })
  test('form', () => {
    storeRender();
    const linkElement = screen.getByTestId("form");
    expect(linkElement).toBeTruthy();
  })

});

describe("Component Tests", function () {

  test('password input event testing', () => {
    storeRender();
    fireEvent.change(screen.getByTitle('login-passcode'), { target: { value: '12344' } });
    expect(screen.getByTitle('login-passcode').value).toBe('12344');
  })

  test('mail input event testing', () => {
    storeRender();
    fireEvent.change(screen.getByTitle('login-mailID'), { target: { value: 'mail@gmai.com' } });
    expect(screen.getByTitle('login-mailID').value).toBe('mail@gmai.com');
  })

  test('Error message for empty email box', async () => {
    storeRender()
    // await act(async () => {
      fireEvent.change(screen.getByTestId('EID'), {
        target: { value: '' },
      // });
    });

    // await act(async () => {
      fireEvent.click(screen.getByTestId('login-btn'))
    // });
    expect(screen.getByTestId('mailValidity')).toHaveTextContent("please enter something")
  });

  test('Error message for empty password box and filled email box', async () => {
    storeRender()
    fireEvent.change(screen.getByTitle('login-mailID'), { target: { value: 'mail@gmai.com' } });
    expect(screen.getByTitle('login-mailID').value).toBe('mail@gmai.com');
    await act(async () => {
      fireEvent.change(screen.getByTestId('login-pass'), {
        target: { value: '' },
      })
    });

    await act(async () => {
      fireEvent.click(screen.getByTestId('login-btn'))
    });
    expect(screen.getByTestId('validation')).toHaveTextContent("please enter something")
  });

  test('Error message for empty email box and filled password box', async () => {
    storeRender()
    await act(async () => {
      fireEvent.change(screen.getByTestId('EID'), {
        target: { value: '' },
      });
    });

    await act(async () => {
      fireEvent.click(screen.getByTestId('login-btn'))
    });
    fireEvent.change(screen.getByTitle('login-passcode'), { target: { value: '12344' } });
    expect(screen.getByTitle('login-passcode').value).toBe('12344');
    expect(screen.getByTestId('mailValidity')).toHaveTextContent("please enter something")
  });

  test('Dissapearing Error message for filled email box and passwordBox', async () => {
    storeRender()
    fireEvent.click(screen.getByTestId('login-btn'))
    expect(screen.getByTestId('mailValidity')).toHaveTextContent("please enter something")
    await waitFor(async () => {
      fireEvent.change(screen.getByTitle('login-mailID'), {
        target: { value: 'mail@gmail.com' },
      });
      expect(screen.queryByTestId('mailValidity')).not.toBeInTheDocument("please enter something")
    });
    fireEvent.click(screen.getByTestId('login-btn'))
    expect(screen.getByTestId('validation')).toHaveTextContent("please enter something")
    await waitFor(async () => {
      fireEvent.change(screen.getByTitle('login-passcode'), {
        target: { value: '123444' },
      });
      expect(screen.queryByTestId('validation')).not.toBeInTheDocument("please enter something")
    });

  });

  test('Call handleLogin by Clicking login-btn', () => {
    storeRender();
    fireEvent.click(screen.getByTestId("login-btn"));
    expect(screen.getByTestId("login-btn")).toBeTruthy();
  })
})
 -->
